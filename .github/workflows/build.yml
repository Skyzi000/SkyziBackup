# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build

on:
  push:
    branches: [ develop ]
    paths-ignore:
      - "**.md"
      - "**.yml"
    # Publish version tags as releases.
    tags: ["v*.*"]
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - "**.yml"

jobs:

  build:

    strategy:
      matrix:
        configuration: [ Release, Debug ]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: SkyziBackup.sln                            # Replace with your solution name, i.e. MyWpfApp.sln.
#      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: SkyziBackup.csproj                      # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
        
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

#     # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test

    - name: Cache SonarCloud packages
      if: github.event_name != 'pull_request' && github.event_name != 'pull_request_target'
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarCloud scanner
      if: github.event_name != 'pull_request' && github.event_name != 'pull_request_target'
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarCloud scanner
      if: |
        steps.cache-sonar-scanner.outputs.cache-hit != 'true' &&
        github.event_name != 'pull_request' && github.event_name != 'pull_request_target'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

#     # Decode the base 64 encoded pfx and save the Signing_Certificate
#     - name: Decode the pfx
#       run: |
#         $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#         $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#         [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

#     # Create the app package by building and packaging the Windows Application Packaging project
#     - name: Create the app package
#       run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration # /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#       env:
#         Appx_Bundle: Always
#         Appx_Bundle_Platforms: x64
#         Appx_Package_Build_Mode: StoreUpload
#         Configuration: ${{ matrix.configuration }}
    
    - name: Build and analyze
      if: github.event_name != 'pull_request' && github.event_name != 'pull_request_target'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        Configuration: ${{ matrix.configuration }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"Skyzi000_SkyziBackup" /o:"skyzi000" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet publish $env:Solution_Name -r win-x64 -v n /p:Configuration=$env:Configuration /p:Platform="x64" /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:SelfContained=false
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Build without analyze
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      shell: powershell
      env:
        Configuration: ${{ matrix.configuration }}
      run: |
        dotnet publish $env:Solution_Name -r win-x64 -v n /p:Configuration=$env:Configuration /p:Platform="x64" /p:PublishSingleFile=true /p:PublishReadyToRun=true /p:SelfContained=false

#     # Remove the pfx
#     - name: Remove the pfx
#       run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: win-x64 ${{ matrix.configuration }}
        path: bin\x64\${{ matrix.configuration }}\net5.0-windows10.0.18362.0\win-x64\publish\
#         name: MSIX Package
#         path: ${{ env.Wap_Project_Directory }}\AppPackages
